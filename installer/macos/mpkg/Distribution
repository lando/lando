<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<installer-gui-script minSpecVersion="1">
    <title>lando_title</title>
    <allowed-os-versions>
        <os-version min="11"/>
    </allowed-os-versions>
    <options customize="allow" allow-external-scripts="yes" rootVolumeOnly="true" hostArchitectures="x86_64"/>
    <welcome file="welcome.rtfd" mime-type="text/rtfd"/>

    <choices-outline>
        <line choice="choiceLando"/>
    </choices-outline>

    <choice id="choiceLando" title="choiceLando_title" description="choiceLando_msg" start_selected="true" start_enabled="true" start_visible="true">
        <pkg-ref id="dev.lando.pkg.lando"/>
    </choice>
    <pkg-ref id="dev.lando.pkg.lando" auth="Root" version="%LANDO_CLI_VERSION%" installKBytes="%LANDO_INSTALL_KBYTES%">#lando.pkg</pkg-ref>
    <pkg-ref id="dev.lando.pkg.lando">
        <bundle-version/>
    </pkg-ref>

    <product id="dev.lando.mpkg" version="%LANDO_VERSION%"/>

    <installation-check script="checkPrerequisite()"/>
    <script>
    <![CDATA[
    /* js:pkmk:start */

    function checkPrerequisite()
    {
        try
        {
            target_arch = system.localizedString('LANDO_TARGET_ARCH');
            if (target_arch == 'x64')
            {
                system.log("Normalized x64 to x86_64");
                target_arch = 'x86_64';
            }

            host_arch = system.sysctl('hw.machine');
            rosetta = system.sysctl('sysctl.proc_translated');
            if (rosetta === 1)
            {
                host_arch = 'arm64';
                system.log("Host architecture is translated, assuming arm64");
            }

            system.log("Target architecture: " + target_arch);
            system.log("Host architecture detected: " + host_arch);

            supported_arch = (host_arch == 'i386' || host_arch == 'x86_64' || host_arch == 'arm64');
            matched_arch = (target_arch == host_arch);
            system.log("Arch supported: " + supported_arch);
            system.log("Target/host arch match: " + matched_arch);
            if (!supported_arch)
            {
                my.result.type = 'Fatal';
                my.result.title = system.localizedString('UNSUPPORTED_HW_MACHINE_TLE');
                my.result.message = system.localizedString('UNSUPPORTED_HW_MACHINE_MSG');
                return false;
            }
            if (!matched_arch)
            {
                my.result.type = 'Fatal';
                my.result.title = system.localizedString('MISMATCHED_HW_MACHINE_TLE');
                my.result.message = system.localizedString('MISMATCHED_HW_MACHINE_MSG');
                return false;
            }
        } catch (e) { system.log(e); return false; }

        try
        {
            test = system.version['ProductVersion'];
            system.log("OS version detected: " + test);
            result = (system.compareVersions(test, '11') >= 0);
            if (!result)
            {
                my.result.type = 'Fatal';
                my.result.title = system.localizedString('UNSUPPORTED_OS_TLE');
                my.result.message = system.localizedString('UNSUPPORTED_OS_MSG');
                return false;
            }
        } catch (e) { system.log(e); return false; }
    }

    /* js:pkmk:end */
    ]]>
    </script>
</installer-gui-script>
